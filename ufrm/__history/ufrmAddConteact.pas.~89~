unit ufrmAddConteact;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, StdCtrls, MainWIN, uConstants, ExtCtrls;

type
  TAddConteactForm = class(TForm)
    Button1: TButton;
    Label1: TLabel;
    Edit1: TEdit;
    Button2: TButton;
    Label2: TLabel;
    Panel1: TPanel;
    Panel2: TPanel;
    procedure Button2Click(Sender: TObject);
    procedure Button1Click(Sender: TObject);
    procedure Edit1KeyUp(Sender: TObject; var Key: Word; Shift: TShiftState);
  private
    { Private declarations }
  public
    { Public declarations }
    QuotationType: ContractType;
    procedure AddConteact(list: TStringList; Atype: ContractType);
  end;

var
  AddConteactForm: TAddConteactForm;

implementation

uses
  uGlobalInstance, uDataStruct, uDataCenter;

{$R *.dfm}

procedure TAddConteactForm.Button1Click(Sender: TObject);
var
  list: TStringList;
begin

  if Edit1.Text = '' then
  begin
    MessageBox(0, '请输入正确格式的合约内容!', '提示', MB_OKCANCEL);
  end
  else
  begin
    list := TStringList.Create();
    list.CommaText := Edit1.Text;
    AddConteact(list, QuotationType);
    list.Free;
    Close;
  end;
end;

procedure TAddConteactForm.Button2Click(Sender: TObject);
begin
  Close;
end;

procedure TAddConteactForm.Edit1KeyUp(Sender: TObject; var Key: Word; Shift: TShiftState);
begin
  inherited;
  if (Key = VK_RETURN) then
    SelectNext(TwinControl(Sender), True, True);
  if (Key = vk_Tab) then
    SelectNext(TwinControl(Sender), not (ssShift in Shift), True);
  if (Key = Vk_Up) then
    SelectNext(TwinControl(Sender), false, true);
  if (Key = Vk_Down) then
    SelectNext(TwinControl(Sender), True, True);
  if (Key = Vk_Up) or (Key = Vk_Down) then
    Key := 0;
end;

procedure TAddConteactForm.AddConteact(list: TStringList; Atype: ContractType);
var
  arr: array of PChar;
  I: Integer;
  J:Integer;
  itmp: Integer;
  pTmp: PDF_SubscriptionCode;
  pSubscriptionCode: PDF_SubscriptionCode;
  p: PDF_CodeInfo;
  nMarketID: Integer;
  ret: Integer;
begin

  case Atype of
    FUTURES:
      begin
        SetLength(arr, list.Count);
        for I := 0 to list.Count - 1 do
        begin
          arr[I] := PChar(list[I]);
        end;
        itmp := FFuturesQuotationProxy.Subscribe(Pointer(arr), list.Count);
        if itmp = 0 then
        begin
          FDataSchedule.AddContracts(arr, FUTURES);
        end
        else
        begin
          MessageBox(0, '合约不存在或输入格式错误!', '提示', MB_OKCANCEL);
        end;
      end;
    OPTION:
      begin
        try
          pTmp := GetMemory(SizeOf(TDF_SubscriptionCode) * list.Count);
          ZeroMemory(pTmp, SizeOf(TDF_SubscriptionCode) * list.Count);
          pSubscriptionCode := pTmp;
          for I := 0 to list.Count - 1 do
          begin
            nMarketID := -1;
            for J in TQuotationDataCenter.Instance.OptionQuotationCodeList.Count do
            begin
              p := TQuotationDataCenter.Instance.OptionQuotationCodeList.Objects[J];
              if (p.szID = list[I]) then
              begin
              //找到对应的代码,获取市场
                nMarketID := p.nIdnum / 100;
              end;
            end;
            if (nMarketID = -1) then
            begin
              MessageBox(Self.Handle, '无效代码：' + list[I], '提示', MB_OK);
              exit;
            end;
            strpcopy(pSubscriptionCode.szMarketFlag, g_szMarketFlag[nMarketID]);
            strpcopy(pSubscriptionCode.szSymbol, list[I]);
            Inc(pSubscriptionCode);
          end;
          ret := FOptionQuotationProxy.SubscribeCode(pTmp, 2);
          if (ret <> 0) then
          begin
            MessageBox(0, '期权行情订阅错误add', '错误', MB_OK);
            exit;
          end;
        finally
          FreeMem(pTmp);
        end;
      end;
    ACTUALS:
      ;
  end;

end;

end.

